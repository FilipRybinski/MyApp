name: publish

on:
  push:
    branches:
      ["main"]

env:
  REGISTRY: ghcr.io
  FRONTEND_PATH: Dockerfiles/Dockerfile.frontend
  BACKEND_PATH: Dockerfiles/Dockerfile.backend
  FRONTEND_IMAGE: myapp-frontend:latest
  BACKEND_IMAGE: myapp-backend:latest
  CERTIFICATE_FILENAME: cert

jobs:
  build-and-publish-images:
    name: Build & Publish Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: lowercase github.repository
        run: |
          echo "USER_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}

      - name: Login
        run: |
          echo ${{secrets.PAT}} | docker login ghcr.io -u ${{github.actor}} --password-stdin

      - name: Build and Publish Frontend
        run: |
          docker build --build-arg CERTIFICATE_CONTENT="${{secrets.CERTIFICATE}}" --build-arg PRIVATE_KEY_CONTENT="${{secrets.CERTIFICATE_PRIVATE_KEY}}" -f ${{env.FRONTEND_PATH}} . --tag ${{env.REGISTRY}}/${{env.USER_NAME}}/${{env.FRONTEND_IMAGE}}
          docker push ${{env.REGISTRY}}/${{env.USER_NAME}}/${{env.FRONTEND_IMAGE}}

      - name: Build and Publish Backend
        run: |
          docker build -f ${{env.BACKEND_PATH}} . --tag ${{env.REGISTRY}}/${{env.USER_NAME}}/${{env.BACKEND_IMAGE}}
          docker push ${{env.REGISTRY}}/${{env.USER_NAME}}/${{env.BACKEND_IMAGE}}

  deploy:
    needs: build-and-publish-images
    name: deploy
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.SSH_HOST}} > ~/.ssh/known_hosts

      - name: Login
        run: |
          echo ${{secrets.PAT}} | docker login ghcr.io -u ${{github.actor}} --password-stdin

      - name: Create certificate file
        run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "cd ${{secrets.WORK_DIR}} && echo '${{ secrets.CERTIFICATE }}' > cert.crt"

      - name: Create certificate private key file
        run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "cd ${{secrets.WORK_DIR}} && echo '${{secrets.CERTIFICATE_PRIVATE_KEY}}' > cert.key"

      - name: Wait for certificate files to be created
        run: |
          while [ ! -f "${{secrets.CERTIFICATE_DIRECTORY}}/cert.crt" ] || [ ! -f "${{secrets.CERTIFICATE_DIRECTORY}}/cert.key" ]; do
            sleep 1
          done

      - name: Create certificate pfx file
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "cd ${{secrets.CERTIFICATE_DIRECTORY}} && openssl pkcs12 -export -out ${{env.CERTIFICATE_FILENAME}}.pfx -inkey ${{env.CERTIFICATE_FILENAME}}.key -in ${{env.CERTIFICATE_FILENAME}}.crt -passout pass:${{secrets.CERTIFICATE_PASSWORD}}"

      - name: connect and pull
        run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "cd ${{secrets.WORK_DIR}} && docker compose pull && docker compose up -d && exit"

      - name: remove old images
        run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "yes | docker image prune -a && exit"

      - name: cleanup
        run: rm -rf ~/.ssh
