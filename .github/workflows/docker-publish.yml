name: publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_PATH: Dockerfiles/Dockerfile.frontend
  FRONTEND_PROXY_PATH: Dockerfiles/Dockerfile.frontendProxy
  BACKEND_MYAPP_PATH: Dockerfiles/Dockerfile.backend
  BACKEND_INTEGRATION_PATH: Dockerfiles/Dockerfile.integration
  APP_SETTINGS_PATH: src/MyApp.Api/appsettings.json
  FRONTEND_IMAGE: myapp-frontend:latest
  FRONTEND_PROXY_IMAGE: myapp-frontend-proxy:latest
  BACKEND_MYAPP_IMAGE: myapp-backend:latest
  BACKEND_INTEGRATION_IMAGE: integration-backend:latest
  CERTIFICATE_FILENAME: cert
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  build-frontend:
    name: Build & Publish Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set USER_NAME
        run: echo "USER_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to Docker Registry
        run: echo "${{ secrets.PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build and Publish Frontend
        run: |
          docker build -f ${{ env.FRONTEND_PATH }} . --tag ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.FRONTEND_IMAGE }}
          docker push ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.FRONTEND_IMAGE }}

      - name: Build and Publish Frontend Proxy
        run: |
          docker build --build-arg CERTIFICATE_CONTENT="${{ secrets.CERTIFICATE }}" --build-arg PRIVATE_KEY_CONTENT="${{ secrets.CERTIFICATE_PRIVATE_KEY }}" -f ${{ env.FRONTEND_PROXY_PATH }} . --tag ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.FRONTEND_PROXY_IMAGE }}
          docker push ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.FRONTEND_PROXY_IMAGE }}

  build-backend:
    name: Build & Publish Backend
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set USER_NAME
        run: echo "USER_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to Docker Registry
        run: echo "${{ secrets.PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Apply appsettings MyApp backend
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.APP_SETTINGS_PATH }}
        env:
          auth.signingKey: ${{ secrets.APP_SETTINGS_SIGNING_KEY }}
          database.connectionString: ${{ secrets.APP_SETTINGS_CONNECTION_STRING }}

      - name: Build and Publish MyApp Backend
        run: |
          docker build -f ${{ env.BACKEND_MYAPP_PATH }} . --tag ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.BACKEND_MYAPP_IMAGE }}
          docker push ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.BACKEND_MYAPP_IMAGE }}

      - name: Build and Publish Integration Backend
        run: |
          docker build -f ${{ env.BACKEND_INTEGRATION_PATH }} . --tag ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.BACKEND_INTEGRATION_IMAGE }}
          docker push ${{ env.REGISTRY }}/${{ env.USER_NAME }}/${{ env.BACKEND_INTEGRATION_IMAGE }}

  create-dependencies-structure:
    name: Create Certificate
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Create Main Directory
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.WORK_DIR }}"

      - name: Create Certificate Directory and Files
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          mkdir -p ${{ secrets.CERTIFICATE_DIRECTORY }} &&
          echo '${{ secrets.CERTIFICATE }}' > ${{ secrets.CERTIFICATE_DIRECTORY }}/${{ env.CERTIFICATE_FILENAME }}.crt &&
          echo '${{ secrets.CERTIFICATE_PRIVATE_KEY }}' > ${{ secrets.CERTIFICATE_DIRECTORY }}/${{ env.CERTIFICATE_FILENAME }}.key"

      - name: Create Docker Compose file
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cat > ${{ secrets.WORK_DIR }}/${{ env.DOCKER_COMPOSE_FILE }} << 'EOL'
          ${{ secrets.DOCKER_COMPOSE }}
          EOL"

      - name: Cleanup
        run: rm -rf ~/.ssh

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      [
        build-backend,
        create-dependencies-structure,
      ]

    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Login to Docker Registry
        run: echo "${{ secrets.PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Create Certificate PFX File
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.CERTIFICATE_DIRECTORY }} && openssl pkcs12 -export -out ${{ env.CERTIFICATE_FILENAME }}.pfx -inkey ${{ env.CERTIFICATE_FILENAME }}.key -in ${{ env.CERTIFICATE_FILENAME }}.crt -passout pass:${{ secrets.CERTIFICATE_PASSWORD }}"

      - name: Connect and Pull
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker compose pull && docker compose up -d && exit"

      - name: Remove Old Images
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "yes | docker image prune -a && exit"

      - name: Cleanup
        run: rm -rf ~/.ssh
